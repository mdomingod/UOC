line = 6
)
# Boxplot amb les dades tractades pel logaritme (Phospho_log).
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(Phospho_log, col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
mtext(
"Mètodes",
side = 1,
line = 6
)
# Boxplot amb les dades tractades pel logaritme (Phospho_log).
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(log2(Phospho_log), col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
mtext(
"Mètodes",
side = 1,
line = 6
)
# Boxplot amb les dades tractades pel logaritme (Phospho_log).
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(log(Phospho_log), col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
mtext(
"Mètodes",
side = 1,
line = 6
)
# Boxplot amb les dades tractades pel logaritme (Phospho_log).
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(log10(Phospho_log), col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
mtext(
"Mètodes",
side = 1,
line = 6
)
# Boxplot amb les dades tractades pel logaritme (Phospho_log).
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(ln(Phospho_log), col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
# Boxplot amb les dades tractades pel logaritme (Phospho_log).
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(log5(Phospho_log), col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
# Boxplot amb les dades tractades pel logaritme (Phospho_log).
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(log2(Phospho_log), col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
mtext(
"Mètodes",
side = 1,
line = 6
)
summary((exp_data_Phospho))
data.frame(summary(exp_data_Phospho))
Phospho <- assays(se_object)$abundance # Defining the data on a variable.
Phospho <- data.frame(exp_data_Phospho)
Phospho
View(Phospho)
dim(Phospho)
names(Phospho)
data.frame(round(apply(Phospho,2, summary))) # Column-wise statistics in dataframe format.
f<- function(x){
ifelse (is.numeric(x),
hist(x, breaks=5),
barplot(table(x))
)
}
par(mfrow=c(3,2))
apply(Phospho,2,f)
# Centralització i normalització de les dades
Phospho_log_centered <- scale(Phospho_log, center = TRUE, scale = TRUE)
Phospho_log_centered
View(Phospho_log_centered)
# Visualitzem les dades escalades i centrades
histo_cen <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho_log_centered)) {
hist(Phospho_log_centered[, i], main = names(Phospho_log_centered)[i])
}
par(histo_cen)
Phospho_centered <- scale(Phospho, center = TRUE, scale = TRUE)
# Visualitzem les dades escalades i centrades
histo_cen <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho_centered)) {
hist(Phospho_centered[, i], main = names(Phospho_centered)[i])
}
par(histo_cen)
# Definició de les dades en una variable.
Phospho <- assays(se_object)$abundance # Defining the data on a variable.
Phospho <- data.frame(exp_data_Phospho)
Phospho
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Datacat <- read_excel("../metaboData/Data_Catalog.xlsx")
colnames(Datacat)
head(Datacat)
Datacat$Description
# Codi per accedir al data set (2018-Phosphoproteomics) escollit des del repositori de git hub clonat al directori local del meu pc.
DataSetPhospho <- read_excel("../metaboData/Datasets/2018-Phosphoproteomics/TIO2+PTYR-human-MSS+MSIvsPD.xlsx")
colnames(DataSetPhospho)
head(DataSetPhospho)
library(S4Vectors)
library(SummarizedExperiment)
row_data <- DataFrame(
SequenceModifications = DataSetPhospho$SequenceModifications,
Accession = DataSetPhospho$Accession,
Description = DataSetPhospho$Description,
Score = DataSetPhospho$Score,
CLASS = DataSetPhospho$CLASS,
PHOSPHO = DataSetPhospho$PHOSPHO
)
# Definició dels rownames amb la informació de la columna "Accession".
rownames(row_data) <- row_data$Accession
assay_matrix <- as.matrix(
DataSetPhospho[, c("M1_1_MSS", "M1_2_MSS", "M5_1_MSS", "M5_2_MSS",
"T49_1_MSS", "T49_2_MSS",
"M42_1_PD", "M42_2_PD", "M43_1_PD", "M43_2_PD",
"M64_1_PD", "M64_2_PD")]
)
# Assignació dels mateixos noms de fila que a rowData (row_data).
rownames(assay_matrix) <- rownames(row_data)
sample_names <- c("M1_1_MSS", "M1_2_MSS", "M5_1_MSS", "M5_2_MSS",
"T49_1_MSS", "T49_2_MSS", "M42_1_PD", "M42_2_PD",
"M43_1_PD", "M43_2_PD", "M64_1_PD", "M64_2_PD")
method <- c(rep("MSS", 6), rep("PD", 6))
col_data <- DataFrame(
sample = sample_names,
method = method
)
# Fer coincidir rownames(col_data) amb la matriu
rownames(col_data) <- col_data$sample
col_data
# Codi per reordenar les dades de col_data en cas de que no coincideixen amb les de la matriu assay_matrix:
col_data <- col_data[colnames(assay_matrix), ]
col_data
se_object <- SummarizedExperiment(
assays = list(abundance = assay_matrix),
rowData = row_data,
colData = col_data
)
se_object  # Mostra el resum de l'objecte.
dim(se_object) # Hauria de ser 1438 features x 12 mostres.
rowData(se_object) # Metadades de cada feature.
colData(se_object) # Metadades de cada mostra.
head(assays(se_object)$abundance) # Les primere files de la matriu de dades.
# Definició de les dades en una variable.
Phospho <- assays(se_object)$abundance # Defining the data on a variable.
Phospho <- data.frame(exp_data_Phospho)
Phospho
dim(Phospho)
names(Phospho)
# Estadístiques per columna.
data.frame(round(apply(Phospho,2, summary)))
# Histogrames de les dades originals
histo <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
par(histo)
Phospho_log <- exp_data_Phospho
Phospho_log <- log(Phospho_log + 1)
View(Phospho_log)
{r}
Phospho_log <- exp_data_Phospho
Phospho_log <- log(Phospho_log + 1)
View(Phospho_log)
histo_log <- par(mfrow=c(3,4))
for (i in 1:ncol(Phospho_log))
hist(Phospho_log[,i], main = names(Phospho_log)[i])
par(histo_log)
# Boxplot amb les dades tractades pel logaritme (Phospho_log).
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(Phospho_log, col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
mtext(
"Mètodes",
side = 1,
line = 6
)
# Centralització i normalització de les dades
Phospho_log_centered <- scale(Phospho_log, center = TRUE, scale = TRUE)
# Anàlisi multivariant: PCA
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
# Anàlisi multivariant: PCA
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
ggplot(pca_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA dels fosfopèptids", x = "PC1", y = "PC2") +
theme_minimal()
library(ggplot2)
# Anàlisi multivariant: PCA
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
ggplot(pca_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA dels fosfopèptids", x = "PC1", y = "PC2") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(pheatmap)
library(ggplot2)
library(dplyr)
library(heatmap)
library(ggplot2)
library(dplyr)
# Anàlisi multivariant: PCA
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
ggplot(pca_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA dels fosfopèptids", x = "PC1", y = "PC2") +
theme_minimal()
# Anàlisi multivariant: PCA --> princomp
pca1 <- prcomp(t(Phospho_log_centered), scale. = TRUE)
# Visualització del PCA
pca1_data <- data.frame(pca1$x)
pca1_data$method <- col_data$method
ggplot(pca1_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA dels fosfopèptids", x = "PC1", y = "PC2") +
theme_minimal()
# Anàlisi multivariant: PCA --> princomp
pca1 <- princomp(t(Phospho_log_centered), scale. = TRUE)
library(ggplot2)
library(dplyr)
# Anàlisi multivariant: PCA --> prcomp
pca <- prcomp(Phospho_log_centered)
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
# Anàlisi multivariant: PCA --> princomp
pca1 <- princomp(Phospho_log_centered)
# Visualització del PCA
pca1_data <- data.frame(pca1$x)
pca1_data$method <- col_data$method
library(ggplot2)
library(dplyr)
# Anàlisi multivariant: PCA --> prcomp
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
ggplot(pca_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA dels fosfopèptids", x = "PC1", y = "PC2") +
theme_minimal()
# Anàlisi multivariant: PCA --> princomp
pca1 <- princomp(t(Phospho_log_centered), scale. = TRUE)
X <- Phospho_log_centered
# Funció plotPCA
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE, cex4text=0.8)
{
pcX <- prcomp(t(X), scale.=scale)  # Utilitzar t(X) per transposar la matriu
loads <- round(pcX$sdev^2/sum(pcX$sdev^2)*100, 1)
xlab <- c(paste("PC1", loads[1], "%"))
ylab <- c(paste("PC2", loads[2], "%"))
if (is.null(colors)) colors <- 1
plot(pcX$x[, 1:2], xlab=xlab, ylab=ylab, col=colors,
xlim=c(min(pcX$x[, 1])-10, max(pcX$x[, 1])+10),
ylim=c(min(pcX$x[, 2])-10, max(pcX$x[, 2])+10))
text(pcX$x[, 1], pcX$x[, 2], labels, pos=3, cex=cex4text)
title(paste("Plot of first 2 PCs for expressions in", dataDesc, sep=" "), cex=0.8)
}
# Aplicar la funció plotPCA al dataset
labels <- col_data$sample
colors <- as.numeric(factor(col_data$method))
dataDesc <- "Phospho dataset"
plotPCA(Phospho_log_centered, labels=labels, colors=colors, dataDesc=dataDesc)
X <- Phospho_log_centered
# Funció plotPCA
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE, cex4text=0.8)
{
pcX <- prcomp(t(X), scale.=scale)  # Utilitzar t(X) per transposar la matriu
loads <- round(pcX$sdev^2/sum(pcX$sdev^2)*100, 1)
xlab <- c(paste("PC1", loads[1], "%"))
ylab <- c(paste("PC2", loads[2], "%"))
if (is.null(colors)) colors <- 1
plot(pcX$x[, 1:2], xlab=xlab, ylab=ylab, col=colors,
xlim=c(min(pcX$x[, 1])-10, max(pcX$x[, 1])+10),
ylim=c(min(pcX$x[, 2])-10, max(pcX$x[, 2])+10))
text(pcX$x[, 1], pcX$x[, 2], labels, pos=3, cex=cex4text)
title(paste("Plot of first 2 PCs for expressions in", dataDesc, sep=" "), cex=0.8)
}
# Aplicar la funció plotPCA al dataset Phospho_log_centered.
labels <- col_data$sample
colors <- as.numeric(factor(col_data$method))
dataDesc <- "Phospho_log_centered dataset"
plotPCA(Phospho_log_centered, labels=labels, colors=colors, dataDesc=dataDesc)
library(ggplot2)
library(dplyr)
# Anàlisi multivariant: PCA --> prcomp
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
ggplot(pca_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA of phosphopeptides", x = "PC1", y = "PC2") +
theme_minimal()
manDist <- dist(t(X))
heatmap (as.matrix(manDist), col=heat.colors(16))
save(se_object, file = "se_object_Phospho.rda")
load("C:/Users/marte/Documents/CDocuments/MDescàrregues/UOC/3r/Òmiques/PAC 1/Domingo_Domènech_Marta_PEC1/se_object_Phospho.rda")
load("~/CDocuments/MDescàrregues/UOC/3r/Òmiques/PAC 1/Domingo_Domènech_Marta_PEC1/se_object_Phospho.rda")
load("~/CDocuments/MDescàrregues/UOC/3r/Òmiques/PAC 1/Domingo_Domènech_Marta_PEC1/se_object_Phospho.rda")
source("~/.active-rstudio-document", echo=TRUE)
# Explorem les dimensions i els noms de les mostres:
dim(Phospho)
names(Phospho)
# Exploració estadístiques per columna amb la funció summary convertint-lo en un dataframe per comoditat visual.
data.frame(round(apply(Phospho,2, summary)))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
histo <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
histo <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
# Histogrames de les dades originals
histo <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
# Definició de les dades en una variable.
Phospho <- assays(se_object)$abundance # Defining the data on a variable.
Phospho <- data.frame(Phospho)
Phospho
# Estadístiques per columna.
data.frame(round(apply(Phospho,2, summary)))
# Histogrames de les dades originals
histo <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
par(histo)
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
# Histogrames de les dades originals
histo <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
data.frame(round(apply(Phospho,2, summary)))
histo <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
histo <- par(mfrow = c(1, 1))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
dev.new()
histo <- par(mfrow = c(1, 1))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
par(histo)
dev.new()
histo <- par(mfrow = c(3, 4))
for (i in 1:ncol(Phospho)) {
hist(Phospho[, i], main = names(Phospho)[i])
}
par(histo)
# Observem que les dades necessiten una transformació logaritmica:
Phospho_log <- Phospho
Phospho_log <- log(Phospho_log + 1)
# Tornem a representar els histogrames:
dev.new()
histo_log <- par(mfrow=c(3,4))
for (i in 1:ncol(Phospho_log))
hist(Phospho_log[,i], main = names(Phospho_log)[i])
par(histo_log)
dev.new()
par(mar=c(7, 4, 4, 2))
groupColor <- c(rep("red", 6), rep("blue", 6))
boxplot(Phospho_log, col=groupColor, main="Expression values for 12 samples, two groups",
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
mtext(
"Mètodes",
side = 1,
line = 6
)
dev.new()
par(mar=c(7, 4, 4, 2))                                                                         # Mides de la graella del boxplot.
groupColor <- c(rep("red", 6), rep("blue", 6))                                                 # Definició dels colors segone el nombre de msotres (12) repartits entre els dos grups (MSS i PD)
boxplot(Phospho_log, col=groupColor, main="Expression values for 12 samples, two groups",      # Execució del boxplot.
xlab="",
ylab="Expression", las=2, cex.axis=0.7, cex.main=0.7)
mtext(                                                                                        # Definició del disseny del títol de l'eix de les x per evitar el solapament amb els noms de les mostres.
"Mètodes",
side = 1,
line = 5
)
Phospho_log_centered <- scale(Phospho_log, center = TRUE, scale = TRUE)
# Un cop hem visualitzat les dades gràficament, procedim a centralitzar-les per poder dur a terme l'anàlisi multivariant amb PCAs.
# Centralització i normalització de les dades
Phospho_log_centered <- scale(Phospho_log, center = TRUE, scale = TRUE)
library(ggplot2)      # Llibreria per la representació de gràfiques més elaborada
library(dplyr)        # Llibreria per executar la funció prcomp
# Anàlisi multivariant: PCA --> prcomp
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)       # Degut a que hi ha més variables que mostres s'ha d'aplicar la funció t() que transposar la matriu de les dades d'entrada.
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
ggplot(pca_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA of phosphopeptides", x = "PC1", y = "PC2") +
theme_minimal()
# Un cop hem visualitzat les dades gràficament, procedim a centralitzar-les per poder dur a terme l'anàlisi multivariant amb PCAs.
# Centralització i normalització de les dades
Phospho_log_centered <- scale(Phospho_log, center = TRUE, scale = TRUE)
library(ggplot2)      # Llibreria per la representació de gràfiques més elaborada
library(dplyr)        # Llibreria per executar la funció prcomp
# Anàlisi multivariant: PCA --> prcomp
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)       # Degut a que hi ha més variables que mostres s'ha d'aplicar la funció t() que transposar la matriu de les dades d'entrada.
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
ggplot(pca_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA of phosphopeptides", x = "PC1", y = "PC2") +
theme_minimal()
Phospho_log_centered <- scale(Phospho_log, center = TRUE, scale = TRUE)
library(ggplot2)      # Llibreria per la representació de gràfiques més elaborada
library(dplyr)        # Llibreria per executar la funció prcomp
# Anàlisi multivariant: PCA --> prcomp
pca <- prcomp(t(Phospho_log_centered), scale. = TRUE)       # Degut a que hi ha més variables que mostres s'ha d'aplicar la funció t() que transposar la matriu de les dades d'entrada.
# Visualització del PCA
pca_data <- data.frame(pca$x)
pca_data$method <- col_data$method
dev.new()
ggplot(pca_data, aes(x = PC1, y = PC2, color = method)) +
geom_point(size = 3) +
labs(title = "PCA of phosphopeptides", x = "PC1", y = "PC2") +
theme_minimal()
dev.new()
X <- Phospho_log_centered
# Funció plotPCA
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE, cex4text=0.8)
{
pcX <- prcomp(t(X), scale.=scale)  # Utilitzar t(X) per transposar la matriu
loads <- round(pcX$sdev^2/sum(pcX$sdev^2)*100, 1)
xlab <- c(paste("PC1", loads[1], "%"))
ylab <- c(paste("PC2", loads[2], "%"))
if (is.null(colors)) colors <- 1
plot(pcX$x[, 1:2], xlab=xlab, ylab=ylab, col=colors,
xlim=c(min(pcX$x[, 1])-10, max(pcX$x[, 1])+10),
ylim=c(min(pcX$x[, 2])-10, max(pcX$x[, 2])+10))
text(pcX$x[, 1], pcX$x[, 2], labels, pos=3, cex=cex4text)
title(paste("Plot of first 2 PCs for expressions in", dataDesc, sep=" "), cex=0.8)
}
# Aplicar la funció plotPCA al dataset Phospho_log_centered.
labels <- col_data$sample
colors <- as.numeric(factor(col_data$method))
dataDesc <- "Phospho_log_centered dataset"
plotPCA(Phospho_log_centered, labels=labels, colors=colors, dataDesc=dataDesc)
# Per últim executarem un estudi basat en distàncies amb la funció heatmap().
# Aquest estudi consisteix en calcular una matriu de distàncies i visualitzant-la mitjançant un mapa de colors.
dev.new()
manDist <- dist(t(X))
heatmap (as.matrix(manDist), col=heat.colors(16))
save(DataSetPhospho, "DataSetPhospho_dataset.txt")
save(DataSetPhospho, "DataSetPhospho_dataset.txt")
DataSetPhospho
dataframe(DataSetPhospho)
data.frame(DataSetPhospho)
save(data.frame(DataSetPhospho), "DataSetPhospho_dataset.txt")
write.table(DataSetPhospho file = "DataSetPhospho_dataset.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(DataSetPhospho, file = "DataSetPhospho_dataset.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(Phospho, file = "Phospho_dataframe_only_rawdata.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(se_object, file = "se_object_data.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(Phospho_log, file = "Phospho_dataframe_transformedLOG.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(Phospho_log_centered, file = "Phospho_dataframe_transformedLOG_Centered.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
# Estadístiques per columna.
View(data.frame(round(apply(Phospho,2, summary)))  )
